# -*- coding: utf-8 -*-
"""IWS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hb2uor1EnYclpCMCo37aWnzmNiB4ZJCW

Date:2/08/2023

Ceasar Cipher
"""

def caesar_cipher_encrypt(plaintext, key):
    encrypted_text = ""
    for char in plaintext:
        if char.isalpha():
            is_uppercase = char.isupper()
            char_offset = ord('A') if is_uppercase else ord('a')
            encrypted_char = chr((ord(char) - char_offset + key) % 26 + char_offset)
            encrypted_text += encrypted_char if is_uppercase else encrypted_char.lower()
        else:
            encrypted_text += char
    return encrypted_text


def caesar_cipher_decrypt(ciphertext, key):
    return caesar_cipher_encrypt(ciphertext, -key)


def main():
    plaintext = input("Enter the text to encrypt: ")
    key = int(input("Enter the encryption key (an integer value): "))

    encrypted_text = caesar_cipher_encrypt(plaintext, key)
    print("Encrypted text:", encrypted_text)

    decrypted_text = caesar_cipher_decrypt(encrypted_text, key)
    print("Decrypted text:", decrypted_text)


if __name__ == "__main__":
    main()

"""Monoalphabatic Cipher"""

def monoalphabetic_encrypt(plaintext, key):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    encrypted = ''.join(key[alphabet.index(c)] if c.isalpha() else c for c in plaintext.lower())
    return encrypted


key = 'phqgiumeaylnofdxjkrcvstzwb'
plaintext = 'whoami'
encrypted = monoalphabetic_encrypt(plaintext, key)
      4er3e3e n
print(f'Plaintext: {plaintext}')
print(f'Encrypted: {encrypted}')

"""Playfair Cipher"""

def generate_playfair_matrix(key):
    key = generate_playfair_key(key)
    matrix = [[''] * 5 for _ in range(5)]
    idx = 0

    for i in range(5):
        for j in range(5):
            matrix[i][j] = key[idx]
            idx += 1

    return matrix

def display_matrix(matrix):
    for row in matrix:
        print(' '.join(row))

def generate_playfair_key(key):
    key = key.replace(" ", "").upper()
    key = key.replace("J", "I")
    key_set = set(key)
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    return key + ''.join(filter(lambda char: char in alphabet and char not in key_set, alphabet))

# Get user input for key
key = input("Enter the key: ")

# Generate and display the Playfair matrix
matrix = generate_playfair_matrix(key)
display_matrix(matrix)

def generate_playfair_matrix(key):
    key = generate_playfair_key(key)
    matrix = [[''] * 5 for _ in range(5)]
    idx = 0

    for i in range(5):
        for j in range(5):
            matrix[i][j] = key[idx]
            idx += 1

    return matrix

def find_positions(matrix, char):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j

def playfair_transform(text, matrix, direction):
    text = text.replace(" ", "").upper().replace("J", "I")
    if len(text) % 2 == 1:
        text += "Z"
    transformed_text = ""
    i = 0
    while i < len(text):
        char1 = text[i]
        char2 = text[i+1]
        row1, col1 = find_positions(matrix, char1)
        row2, col2 = find_positions(matrix, char2)
        if row1 == row2:
            transformed_text += matrix[row1][(col1 + direction) % 5] + matrix[row2][(col2 + direction) % 5]
        elif col1 == col2:
            transformed_text += matrix[(row1 + direction) % 5][col1] + matrix[(row2 + direction) % 5][col2]
        else:
            transformed_text += matrix[row1][col2] + matrix[row2][col1]
        i += 2
    return transformed_text

def playfair_encrypt(plain_text, matrix):
    return playfair_transform(plain_text, matrix, 1)

def playfair_decrypt(encrypted_text, matrix):
    return playfair_transform(encrypted_text, matrix, -1)

def display_matrix(matrix):
    for row in matrix:
        print(' '.join(row))

def generate_playfair_key(key):
    key = key.replace(" ", "").upper()
    key = key.replace("J", "I")
    key_set = set(key)
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    return key + ''.join(filter(lambda char: char in alphabet and char not in key_set, alphabet))

# Get user input for key and plain text
key = input("Enter the key: ")
plain_text = input("Enter the plain text: ")

# Generate Playfair matrix
matrix = generate_playfair_matrix(key)

# Display the matrix
print("Playfair Matrix:")
display_matrix(matrix)

# Encrypt and decrypt
encrypted_text = playfair_encrypt(plain_text, matrix)
print("\nEncrypted:", encrypted_text)
decrypted_text = playfair_decrypt(encrypted_text, matrix)
print("Decrypted:", decrypted_text)